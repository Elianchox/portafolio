---
import ThemeToggle from "./ThemeToggle.astro";
---

<header class="fixed top-3 z-10 items-center justify-center w-full mx-auto mt-2 hidden md:flex">
   <nav id="nav" class="flex px-3 text-lg lg:text-sm font-medium rounded-full text-muted-foreground dark:text-foreground justify-center items-center transition-all duration-300">
      <a class="px-2 py-2 transition hover:text-primary dark:hover:text-primary cursor-pointer"
         aria-label="experiencia"
         href="/#experiencia">Experiencia</a>
      <a class="px-2 py-2 transition hover:text-primary dark:hover:text-primary cursor-pointer"
         aria-label="proyectos"
         href="/#proyectos">Proyectos</a>
      <a class="px-2 py-2 transition hover:text-primary dark:hover:text-primary cursor-pointer"
         aria-label="habilidades"
         href="/#habilidades">Habilidades</a>
      <a class="px-2 py-2 transition hover:text-primary dark:hover:text-primary cursor-pointer"
         aria-label="sobre-mi"
         href="/#sobre-mi">Sobre m√≠</a>
      <ThemeToggle classContainer="px-4"/>
   </nav>
</header>

<script>
  const navClasses = [
    "backdrop-blur-lg",
    "bg-secondary-foreground/10",
    "dark:bg-white/10",
    "shadow-lg",
    "ring-1",
    "ring-white/10",
  ];

  const nav = document.getElementById("nav");
  let ticking = false;

  const handleScroll = () => {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        if (nav) {
          if (window.scrollY > 100) {
            navClasses.forEach(cls => nav.classList.add(cls));
          } else {
            navClasses.forEach(cls => nav.classList.remove(cls));
          }
        }
        ticking = false;
      });
      ticking = true;
    }
  };

  window.addEventListener("scroll", handleScroll, { passive: true });

  const links = document.querySelectorAll("nav a");
  const sections = document.querySelectorAll("section[id]");

  if (sections.length > 0) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const id = entry.target.id;
            links.forEach((link) => {
              const href = link.getAttribute("href");
              link.classList.toggle(
                "text-primary",
                href === `/#${id}` || href === `#${id}`
              );
            });
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: "-30% 0px -40% 0px"
      }
    );

    sections.forEach((section) => observer.observe(section));
  }
</script>